# -*- coding: utf-8 -*-
"""nlp-disaster-tweets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NOamU6j0N4NTUcnqBiBqXFdi9ADa-vGT
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

!pip install datasets evaluate transformers[sentencepiece] nltk

import pandas as pd

train_tweets=pd.read_csv('/content/train.csv')
test_tweets=pd.read_csv('/content/test.csv')

train_tweets.head()

from transformers import AutoTokenizer, AutoModelForSequenceClassification, TextClassificationPipeline

# Use a model fine-tuned for classification tasks
#model_name = "distilbert-base-uncased"  # Replace with a more suitable model if needed
model_name= f"cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

classifier = TextClassificationPipeline(model=model, tokenizer=tokenizer)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


# Split the training data into train and validation sets
train_texts, val_texts, train_labels, val_labels = train_test_split(
    train_tweets['text'], train_tweets['target'], test_size=0.2, random_state=42
)

# Predict on validation data
val_preds = classifier(val_texts.tolist(), truncation=True)
val_labels_pred = [1 if pred['label'] == 'POSITIVE' else 0 for pred in val_preds]

# Evaluate accuracy
val_accuracy = accuracy_score(val_labels, val_labels_pred)
print(f"Validation Accuracy: {val_accuracy:.4f}")

sample_submission = pd.read_csv('/content/sample_submission.csv')

# Predict sentiments on test data (corrected prediction method)
test_preds = classifier(test_tweets['text'].tolist(), truncation=True)

# Convert predictions to binary labels (1 for POSITIVE, 0 for NEGATIVE)
sample_submission["target"] = [1 if pred['label'] == 'POSITIVE' else 0 for pred in test_preds]

# Save the updated submission file
sample_submission.to_csv('submission.csv', index=False)
print("Corrected submission file saved as 'submission.csv'")

"""# **Without using Huggingface**"""

import nltk
import re
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.svm import SVC

nltk.download('stopwords')

stop_words = set(stopwords.words('english'))

def clean_tweet(tweet):
    tweet = tweet.lower()  # Convert to lowercase
    tweet = re.sub(r'http\S+|www\S+|https\S+', '', tweet)  # Remove URLs
    tweet = re.sub(r'[^A-Za-z\s]', '', tweet)  # Remove punctuation and special characters
    tweet = ' '.join([word for word in tweet.split() if word not in stop_words])  # Remove stopwords
    return tweet

train_tweets['text'] = train_tweets['text'].apply(clean_tweet)
test_tweets['text'] = test_tweets['text'].apply(clean_tweet)

train_tweets.head()

train_texts, val_texts, train_labels, val_labels = train_test_split(
    train_tweets['text'], train_tweets['target'], test_size=0.2, random_state=42
)

vectorizer = TfidfVectorizer(max_features=5000)
X_train_vec = vectorizer.fit_transform(train_texts)
X_val_vec = vectorizer.transform(val_texts)

nb_model = MultinomialNB()
nb_model.fit(X_train_vec, train_labels)
y_pred_nb = nb_model.predict(X_val_vec)

# Evaluate Naive Bayes
print(f"Naive Bayes Accuracy: {accuracy_score(val_labels, y_pred_nb)}")
print(confusion_matrix(val_labels, y_pred_nb))
print(classification_report(val_labels, y_pred_nb))

svm_model = SVC(kernel='linear')
svm_model.fit(X_train_vec, train_labels)
y_pred_svm = svm_model.predict(X_val_vec)

# Evaluate SVM
print(f"SVM Accuracy: {accuracy_score(val_labels, y_pred_svm)}")
print(confusion_matrix(val_labels, y_pred_svm))
print(classification_report(val_labels, y_pred_svm))

test_tweets.head()

sample_submission = pd.read_csv('/content/sample_submission.csv')
sample_submission.head()

#sample_submission = pd.read_csv('/content/sample_submission.csv')
X_test_vec = vectorizer.transform(test_tweets['text'])
test_preds = nb_model.predict(X_test_vec)
sample_submission["target"] = test_preds
sample_submission.to_csv('submission.csv', index=False)


print("Corrected submission file saved as 'submission.csv'")

print(sample_submission["target"].head())